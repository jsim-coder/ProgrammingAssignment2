5+9
install.packages("KernSmooth")
library(KernSmooth)
find packages(devtools)
find packages("devtools")
find.packages("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library("devtools")
find_rtools()
x<-1
y<-2
z<-3
a<-4
Const <- function(x,y,z){
print(x)
}
const(x)
Const(x)
Const <- function(x,y,z){
print(x)
x<-10
print(x)
}
Const(x)
print(x)
Const(x)
Const <- function(x,y,z){
## x value is passed, it can be changed but no impact on x outside the func
print(y)
print(x)
x<-10
print(x)
}
Const(x)
Const(x)
print(a)
Const(x)
Const <- function(x,y,z){
## x value is passed, it can be changed but no impact on x outside the func
print(a)
print(x)
x<-10
print(x)
}
Const(x)
Const <- function(x,y,z){
## x value is passed, it can be changed but no impact on x outside the func
## a is a free variable
print(a)
a<-9
print(x)
x<-10
print(x)
}
Const(x)
print(x)
print(a)
Const <- function(x,y,z){
## x value is passed, it can be changed but no impact on x outside the func
## a is a free variable that assumes teh value 4 but again no impact
## outside the funtion
print(a)
a<<-9
print(x)
x<-10
print(x)
}
Const(x)
print(x)
print(a)
t<-13
Const <- function(x,y,z){
## x value is passed, it can be changed but no impact on x outside the func
## a is a free variable that assumes teh value 4 but again no impact
## outside the funtion
print(a)
a<<-9  # The super assignment assigns outside the parent frame
print(x)
x<-10
print(x)
getval <- function (y,z)  {
t<<-1
}
}
Const(x)
print(t)
class(Const)
str(Const)
list(Const)
source('~/Code/R/Sandpit/cachemean.r')
a<-makeVector()
list(a)
class(a)
a
a$getmean()
a$get()
a$set(1:30)
a$get()
a$setmean()
a$setmean(5)
a$getmean()
source('~/Code/R/Sandpit/cachemean.r')
cachemean(a)
a$setmean(NULL)
cachemean(a)
source('~/Code/R/Sandpit/cachemean.r')
a <- matrix(1:5, 1:3)
a<-makeVector(1:1000)
source('~/Code/R/Sandpit/cachemean.r')
u <- NULL
obj <- function () {
u<-8
}
print (u)
a <- matrix(1:20,4,5)
str(a)
makeCacheMatrix <- function(x = matrix()) {
matrx <- x
invmatrx <- NULL     # on creation - no inversion
setmatrix <- function(y) {
matrx <<- y
invmatrx <<- NULL
}
getmatrix <- function() {matrx}
getinv <- function() {
if(!is.null(invmatrx)) {
message("getting cached data")
return(m)
}
invmatrx <- solve(matrx)
}
# return all matrix manipulation functions in a list
list(setmatrix = setmatrix, getmatrix = getmatrix,
getinv = getinv)
}
b<-makeCacheMatrix(a)
str(b)
print($getmatrix())
print(b$getmatrix())
print(b$getinv())
a <- matrix(1:16,4,4)
str(a)
b<-makeCacheMatrix(a)
str(b)
print(b$getmatrix())
print(b$getinv())
a <- matrix(1:4,4,4)
str(a)
b<-makeCacheMatrix(a)
str(b)
print(b$getmatrix())
print(b$getinv())
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
b<-makeCacheMatrix(a)
str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
p
print(b$getinv())
makeCacheMatrix <- function(x = matrix()) {
matrx <- x
invmatrx <- NULL     # on creation - no inversion
setmatrix <- function(y) {
matrx <<- y
invmatrx <<- NULL
}
getmatrix <- function() {matrx}
getinv <- function() {
if(!is.null(invmatrx)) {
print("getting cached data")
return(invmatrx)
}
invmatrx <- solve(matrx)
}
# return all matrix manipulation functions in a list
list(setmatrix = setmatrix, getmatrix = getmatrix,
getinv = getinv)
}
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
# create matrix constructor
b<-makeCacheMatrix(a)
str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
View(makeCacheMatrix)
View(makeCacheMatrix)
View(obj)
View(obj)
View(Const)
View(cacheSolve)
makeCacheMatrix <- function(x = matrix()) {
matrx <- x
invmatrx <- NULL     # on creation - no inversion
setmatrix <- function(y) {
matrx <<- y
invmatrx <<- NULL
}
getmatrix <- function() {matrx}
getinv <- function() {
if(!is.null(invmatrx)) {
print("getting cached data")
return(invmatrx)
}
invmatrx <- solve(matrx)
}
# return all matrix manipulation functions in a list
list(setmatrix = setmatrix, getmatrix = getmatrix,
getinv = getinv)
}
# Create an invertible matrix
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
# create matrix constructor
b<-makeCacheMatrix(a)
str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
debug(makeCacheMatrix) ## Write a short comment describing this function
b<-makeCacheMatrix(a)
str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
debug(makeCacheMatrix) ## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
source('~/Code/R/Sandpit/cachemean.r')
print(b$getmatrix())
c<-makeCacheMatrix()
str(b)
str(c)
undebug(makeCacheMatrix) ## Write a short comment describing this function
b<-makeCacheMatrix(a)
c<-makeCacheMatrix()
str(c)
n
print(c$getmatrix())
print(b$getinv())
matrx <- x
invmatrx <- NULL     # on creation - no inversion
setmatrix <- function(y) {
matrx <<- y
invmatrx <<- NULL
}
if(!is.null(invmatrx)) {
print("getting cached data")
return(invmatrx)
}
if(!is.null(invmatrx)) {
print("getting cached data")
return(invmatrx)
}
invmatrx <- solve(matrx)
makeCacheMatrix <- function(x = matrix()) {
matrx <- x
invmatrx <- NULL     # on creation - no inversion
setmatrix <- function(y) {
matrx <<- y
invmatrx <<- NULL
}
getmatrix <- function() {matrx}
getinv <- function() {
print("HI")
if(!is.null(invmatrx)) {
print("getting cached data")
return(invmatrx)
}
invmatrx <- solve(matrx)
}
# return all matrix manipulation functions in a list
list(setmatrix = setmatrix, getmatrix = getmatrix,
getinv = getinv)
}
# Create an invertible matrix
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
# create matrix constructor
# return all matrix manipulation functions in a list
list(setmatrix = setmatrix, getmatrix = getmatrix,
getinv = getinv)
}
# Create an invertible matrix
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
# create matrix constructor
b<-makeCacheMatrix(a)
# c<-makeCacheMatrix()
str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
getinv <- function() {
print("HI")
if(is.null(invmatrx)) {
print("getting cached data")
return(invmatrx)
}
invmatrx <- solve(matrx)
}
print(b$getmatrix())
print(b$getinv())
source('~/Code/R/Sandpit/cachemean.r')
a
a
a
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
# create matrix constructor
b<-makeCacheMatrix(a)
# c<-makeCacheMatrix()
# str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
View(cacheSolve)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(setmatrix)
View(setmatrix)
View(cachemean)
View(cachemean)
source('~/Code/R/Sandpit/cachemean.r')
source('~/Code/R/ProgrammingAssignment2/cachematrix.R')
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
# create matrix constructor
b<-makeCacheMatrix(a)
# c<-makeCacheMatrix()
# str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
source('~/Code/R/ProgrammingAssignment2/cachematrix.R')
source('~/Code/R/ProgrammingAssignment2/cachematrix.R')
a <- rbind(c(1, -1/4), c(-1/4, 1))
str(a)
# create matrix constructor
b<-makeCacheMatrix(a)
# c<-makeCacheMatrix()
# str(b)
print(b$getmatrix())
print(b$getinv())
print(b$getinv())
source('~/Code/R/ProgrammingAssignment2/cachematrix.R')
source('~/Code/R/ProgrammingAssignment2/cachematrix.R')
source(cachematrix.R)
source('~/Code/R/ProgrammingAssignment2/runme.R')
source('~/Code/R/ProgrammingAssignment2/cachematrix.R')
source('~/Code/R/ProgrammingAssignment2/cachematrix.R')
source(cachematrix.R)
setwd(../ProgrammingAssignment2)
pwd
getwd
getwd()
setwd(code/R/)
setwd(./code/R/)
Code
getwd
getwd()
setwd("./Code")
setwd("R")
getwd()
ls
setwd("ProgrammingAssignment2")
pwd
source(cachematrix.R)
source("cachematrix.R")
# Create an invertible matrix
a <- rbind(c(1, -1/4), c(-1/4, 1))
a <- rbind(c(1, -1/4), c(-1/4, 1))
# create matrix constructor
b<-makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
source("cachematrix.R")
# Create an invertible matrix
a <- rbind(c(1, -1/4), c(-1/4, 1))
# create matrix constructor
b<-makeCacheMatrix(a)
# run the first time the inverse is solved
cacheSolve(b)
# run again and its cached
cacheSolve(b)
b$setmatrix(a)
# run the first time the inverse is solved
cacheSolve(b)
# run again and its cached
cacheSolve(b)
source("cachematrix.R")
# Create an invertible matrix
a <- rbind(c(1, -1/4), c(-1/4, 1))
# create matrix constructor
b<-makeCacheMatrix(a)
# run the first time the inverse is solved
cacheSolve(b)
# run again and its cached
cacheSolve(b)
# Flush the cache by resetting the matrix
b$setmatrix(a)
# run the first time the inverse is solved
cacheSolve(b)
# run again and its cached
cacheSolve(b)
# and again....
cacheSolve(b)
source("cachematrix.R")
# Create an invertible matrix
a <- rbind(c(1, -1/4), c(-1/4, 1))
# create matrix constructor
b<-makeCacheMatrix(a)
# run the first time the inverse is solved
cacheSolve(b)
# run again and its cached
cacheSolve(b)
# Flush the cache by resetting the matrix
b$setmatrix(a)
# run the first time the inverse is solved
cacheSolve(b)
# run again and its cached
cacheSolve(b)
# and again....
cacheSolve(b)
b$getmatrix()
b$getinv
source('~/Code/R/ProgrammingAssignment2/runme.R')
source('~/Code/R/ProgrammingAssignment2/runme.R')
